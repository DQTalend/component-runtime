/**
 * Copyright (C) 2006-2023 Talend Inc. - www.talend.com
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
final def slackChannel = 'components-ci'
final def veracodeCredentials = usernamePassword(credentialsId: 'veracode-api-credentials', usernameVariable: 'VERACODE_ID', passwordVariable: 'VERACODE_KEY')
final def nexusCredentials = usernamePassword(credentialsId: 'nexus-artifact-zl-credentials', usernameVariable: 'NEXUS_USER', passwordVariable: 'NEXUS_PASSWORD')
Â²
pipeline {
    agent {
        kubernetes {
            yamlFile '.jenkins/jenkins_pod.yml'
            defaultContainer 'main'
        }
    }

    environment {
        MAVEN_OPTS = '-Dmaven.artifact.threads=128 -Dorg.slf4j.simpleLogger.showThreadName=true -Dorg.slf4j.simpleLogger.showDateTime=true -Dorg.slf4j.simpleLogger.dateTimeFormat=HH:mm:ss'
        SKIP_OPTS="-Dspotless.apply.skip=true -Dcheckstyle.skip=true -Drat.skip=true -DskipTests -Dinvoker.skip=true -pl '!talend-component-kit-intellij-plugin' -pl '!reporting'"
        TALEND_REGISTRY = 'registry.datapwn.com'
        VERACODE_APP_NAME = 'Components'
        VERACODE_SANDBOX = 'component-runtime'
        APP_ID = '579232'
    }

    options {
        buildDiscarder(logRotator(artifactNumToKeepStr: '5', numToKeepStr: '5'))
        timeout(time: 180, unit: 'MINUTES')
        skipStagesAfterUnstable()
    }

    stages {
        stage('Preliminary steps') {
            ///////////////////////////////////////////
            // asdf install
            ///////////////////////////////////////////
            script {
                println "asdf install the content of repository .tool-versions'\n"
                sh "bash .jenkins/scripts/asdf_install.sh"
            }
        }
        stage('Post login') {
            steps {
                checkout([$class : 'GitSCM',
                          branches: [[name: 'master']],
                          extensions : [
                                  [$class: 'CheckoutOption', timeout: 30],
                                  [$class: 'CloneOption', depth: 30, noTags: true, shallow: true, timeout: 30]],
                          userRemoteConfigs : [[url: 'https://github.com/Talend/component-runtime.git', credentialsId: 'github-credentials']]])

                script {
                    try {
                        sh " bash .jenkins/scripts/npm_fix.sh"
                    } catch (error) {
                        //
                    }
                }
            }
        }
        stage("Veracode SCA (Source Clear Analysis)") {
            steps {
                withCredentials([string(credentialsId: 'veracode-token', variable: 'SRCCLR_API_TOKEN'), nexusCredentials]) {

                    sh '''#!/bin/bash
                      cp .jenkins/settings.xml ~/.m2/
                      curl -sSL https://download.sourceclear.com/ci.sh | SRCCLR_API_TOKEN=${SRCCLR_API_TOKEN} DEBUG=1 sh -s -- scan --allow-dirty --recursive --skip-collectors npm;
                    '''.stripIndent()
                }
            }
        }
        stage('Veracode SAST (Static testing)') {
            steps {
                withCredentials([veracodeCredentials, nexusCredentials]) {
                    sh "bash mvn -B -s .jenkins/settings.xml package $SKIP_OPTS"

                    veracode applicationName: "$VERACODE_SANDBOX",
                        teams: "Components",
                        canFailJob: true,
                        createProfile: true,
                        criticality: "High",
                        debug: true,
                        copyRemoteFiles: true,
                        fileNamePattern: '',
                        useProxy: false,
                        replacementPattern: '',
                        scanExcludesPattern: '',
                        scanIncludesPattern: '',
                        scanName: "master-${currentBuild.number}-${currentBuild.startTimeInMillis}",
                        uploadExcludesPattern: '**/.cache/**/*.jar,**/*dep*/**/*.jar,**/lib/**/*.jar,**/*repo*/**/*.jar,**/it/**/*.jar,**/sample*.jar',
                        uploadIncludesPattern: '**/*.jar',
                        waitForScan: true,
                        vid: "$VERACODE_ID",
                        vkey: "$VERACODE_KEY"
                }
            }
        }
    }
    post {
        success {
            slackSend(color: '#00FF00', message: "SUCCESSFUL: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL})", channel: "${slackChannel}")
        }
        failure {
            slackSend(color: '#FF0000', message: "FAILED: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL})", channel: "${slackChannel}")
        }
    }
}
