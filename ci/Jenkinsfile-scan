/**
 * Copyright (C) 2006-2023 Talend Inc. - www.talend.com
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
final def slackChannel = 'components-ci'
final def veracodeCredentials = usernamePassword(
  credentialsId: 'veracode-api-credentials',
  usernameVariable: 'VERACODE_ID',
  passwordVariable: 'VERACODE_KEY')
final def nexusCredentials = usernamePassword(
  credentialsId: 'nexus-artifact-zl-credentials',
  usernameVariable: 'NEXUS_USER',
  passwordVariable: 'NEXUS_PASS')

String git_branch_name = ""

pipeline {
  agent {
    kubernetes {
      yamlFile '.jenkins/jenkins_pod.yml'
      defaultContainer 'main'
    }
  }

  environment {
    MAVEN_OPTS = '-Dmaven.artifact.threads=128 -Dorg.slf4j.simpleLogger.showThreadName=true -Dorg.slf4j.simpleLogger.showDateTime=true -Dorg.slf4j.simpleLogger.dateTimeFormat=HH:mm:ss'
    // Maven package skipped elements
    // Everything that is not needed for the veracode scan is excluded to reduce time
    SKIP_OPTS = "-Dspotless.apply.skip=true\
                 -Dcheckstyle.skip=true\
                 -Drat.skip=true\
                 -DskipTests\
                 -Dinvoker.skip=true\
                 -pl '!talend-component-kit-intellij-plugin'\
                 -pl '!reporting'"
    TALEND_REGISTRY = 'registry.datapwn.com'
    VERACODE_APP_NAME = 'Components'
    VERACODE_SANDBOX = 'component-runtime'
    APP_ID = '579232'
  }

  options {
    buildDiscarder(logRotator(artifactNumToKeepStr: '5', numToKeepStr: '5'))
    timeout(time: 180, unit: 'MINUTES')
    skipStagesAfterUnstable()
  }

  parameters {
    booleanParam(
      name: 'VERACODE_SCA',
      defaultValue: true,
      description: 'Veracode SCA (Source Clear Analysis)')
    booleanParam(
      name: 'VERACODE_SAST',
      defaultValue: true,
      description: 'Veracode SAST (Static testing)')
    booleanParam(
      name: 'JENKINS_DEBUG',
      defaultValue: false,
      description: '''
        Add an extra comportment to the job allowing analysis:
          - keep the pod alive for debug purposes''')
  }

  stages {
    stage('Preliminary steps') {
      steps {
        ///////////////////////////////////////////
        // Update build info
        ///////////////////////////////////////////
        script {
          def scans = []
          if (params.VERACODE_SCA) {
            scans.add('SCA')
          }
          if (params.VERACODE_SAST) {
            scans.add('SAST')
          }
          job_name_creation(scans.join('+'))

          git_branch_name = "${env.GIT_BRANCH}".replace("origin/", "")
          job_description_append("Scanned branch: ${git_branch_name}")
        }
        ///////////////////////////////////////////
        // asdf install
        ///////////////////////////////////////////
        script {
          println "asdf install the content of repository .tool-versions'\n"
          sh "bash .jenkins/scripts/asdf_install.sh"
        }
        ///////////////////////////////////////////
        // npm_fix TODO maybe not needed if not root
        ///////////////////////////////////////////
        script {
          try {
            sh "bash .jenkins/scripts/npm_fix.sh"
          } catch (npm_error) {
            println("error running npm_fix.sh: ${npm_error}")
          }
        }
      }
    }
    stage("Veracode SCA (Source Clear Analysis)") {
      when {
        expression { params.VERACODE_SCA }
      }
      steps {
        withCredentials([string(credentialsId: 'veracode-token', variable: 'SRCCLR_API_TOKEN'),
                        nexusCredentials]) {
          sh "bash .jenkins/scripts/veracode-sca.sh $SRCCLR_API_TOKEN"
        }
      }
    }
    stage('Package the app for Static testing') {
      when {
        expression { params.VERACODE_SAST }
      }
      steps {
        withCredentials([veracodeCredentials, nexusCredentials]) {
          script {
            // Execute a mvn package skipping not needed element
            sh "bash .jenkins/scripts/package.sh ${SKIP_OPTS}"
          }
        }
      }
    }
    stage('Veracode SAST (Static testing)') {
      when {
        expression { params.VERACODE_SAST }
      }
      steps {
        withCredentials([veracodeCredentials, nexusCredentials]) {
          script {
            veracode applicationName: "$VERACODE_SANDBOX",
              teams: "Components",
              canFailJob: true,
              createProfile: true,
              criticality: "High",
              debug: true,
              copyRemoteFiles: true,
              fileNamePattern: '',
              useProxy: false,
              replacementPattern: '',
              scanExcludesPattern: '',
              scanIncludesPattern: '',
              scanName: "${git_branch_name}-${currentBuild.number}-${currentBuild.startTimeInMillis}",
              uploadExcludesPattern: '**/.cache/**/*.jar,**/*dep*/**/*.jar,**/lib/**/*.jar,**/*repo*/**/*.jar,**/it/**/*.jar,**/sample*.jar',
              uploadIncludesPattern: '**/*.jar',
              waitForScan: true,
              vid: "$VERACODE_ID",
              vkey: "$VERACODE_KEY"
          }
        }
      }
    }
  }
  post {
    always {
      script {
        if (params.JENKINS_DEBUG) {
          jenkinsBreakpoint()
        }
      }
    }
    success {
      slackSend(
        color: '#00FF00',
        message: "SUCCESSFUL: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL})",
        channel: "${slackChannel}")
    }
    failure {
      slackSend(color: '#FF0000',
        message: "FAILED: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL})",
        channel: "${slackChannel}")
    }
  }
}

/**
 * Append a new line to job description
 * REM This is MARKDOWN, do not forget double space at the end of line
 *
 * @param new line
 * @return void
 */
private void job_name_creation(String extra) {
  String user_name = currentBuild.getBuildCauses('hudson.model.Cause$UserIdCause').userId[0]
  if (user_name == null) {
      user_name = "auto"
  }

  currentBuild.displayName = (
    "#$currentBuild.number-$extra-$user_name"
  )
}

/**
 * Append a new line to job description
 * REM This is MARKDOWN, do not forget double space at the end of line
 *
 * @param new line
 * @return void
 */
private void job_description_append(String new_line) {
  if (currentBuild.description == null) {
    println "Create the job description with: \n$new_line"
    currentBuild.description = new_line
  } else {
    println "Edit the job description adding: $new_line"
    currentBuild.description = currentBuild.description + '\n' + new_line
  }
}

/**
 * Implement a simple breakpoint to stop actual job
 * Use the method anywhere you need to stop
 * The first usage is to keep the pod alive on post stage.
 * Change and restore the job description to be more visible
 *
 * @param job_description_to_backup
 * @return void
 */
private void jenkinsBreakpoint() {
  // Backup the description
  String job_description_backup = currentBuild.description
  // updating build description
  currentBuild.description = "ACTION NEEDED TO CONTINUE \n ${job_description_backup}"
  // Request user action
  input message: 'Finish the job?', ok: 'Yes'
  // updating build description
  currentBuild.description = "$job_description_backup"
}