/**
 * Copyright (C) 2006-2021 Talend Inc. - www.talend.com
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
def slackChannel = 'components-ci'
def veracodeCredentials = usernamePassword(credentialsId: 'veracode-api-credentials', usernameVariable: 'VERACODE_ID', passwordVariable: 'VERACODE_KEY')
def nexusCredentials = usernamePassword(credentialsId: 'nexus-artifact-zl-credentials', usernameVariable: 'NEXUS_USER', passwordVariable: 'NEXUS_PASSWORD')
def tsbiImage = "artifactory.datapwn.com/tlnd-docker-dev/talend/common/tsbi/jdk11-svc-springboot-builder:1.14.0-2.1-20191203093421"

pipeline {
    agent {
        kubernetes {
            label podLabel
            yaml """
apiVersion: v1
kind: Pod
spec:
    containers:
        -
            name: main
            image: '${tsbiImage}'
            command: [cat]
            tty: true
            volumeMounts: [
                { name: docker, mountPath: /var/run/docker.sock }, 
                { name: efs-jenkins-component-runtime-m2, mountPath: /root/.m2}, 
                { name: dockercache, mountPath: /root/.dockercache}
            ]
            resources: {requests: {memory: 3G, cpu: '2'}, limits: {memory: 8G, cpu: '2'}}
    volumes:
        -
            name: docker
            hostPath: {path: /var/run/docker.sock}
        -
            name: efs-jenkins-component-runtime-m2
            persistentVolumeClaim: 
                claimName: efs-jenkins-component-runtime-m2
        -
            name: dockercache
            hostPath: {path: /tmp/jenkins/component-runtime/docker}
    imagePullSecrets:
        - name: talend-registry
"""
        }
    }

    environment {
        MAVEN_OPTS = '-Dmaven.artifact.threads=128 -Dorg.slf4j.simpleLogger.showThreadName=true -Dorg.slf4j.simpleLogger.showDateTime=true -Dorg.slf4j.simpleLogger.dateTimeFormat=HH:mm:ss'
        SKIP_OPTS="-Dspotless.apply.skip=true -Dcheckstyle.skip=true -Drat.skip=true -DskipTests -Dinvoker.skip=true"
        TALEND_REGISTRY = 'registry.datapwn.com'
        VERACODE_APP_NAME = 'Components'
        VERACODE_SANDBOX = 'component-runtime'
        APP_ID = '579232'
    }

    options {
        buildDiscarder(logRotator(artifactNumToKeepStr: '5', numToKeepStr: '5'))
        timeout(time: 60, unit: 'MINUTES')
        skipStagesAfterUnstable()
    }

    triggers {
        cron('0 9 * * 0')
    }

    stages {
        stage("SourceClear analysis") {
            steps {
                container('main') {
                    withCredentials([string(credentialsId: 'veracode-token', variable: 'SRCCLR_API_TOKEN'), nexusCredentials]) {
                        sh '''#!/bin/bash
                          cp .jenkins/settings.xml ~/.m2/
                          curl -sSL https://download.sourceclear.com/ci.sh | SRCCLR_API_TOKEN=${SRCCLR_API_TOKEN} DEBUG=1 sh -s -- scan --allow-dirty --recursive --skip-collectors npm;
                        '''
                    }
                }
            }
        }
        stage('Vera code') {
            steps {
                container('main') {
                    withCredentials([veracodeCredentials, nexusCredentials]) {
                        sh "mvn -B -s .jenkins/settings.xml package $SKIP_OPTS"
                        veracode applicationName: "$VERACODE_APP_NAME",
                            canFailJob: true,
                            createProfile: false,
                            debug: true,
                            copyRemoteFiles: true,
                            fileNamePattern: '',
                            useProxy: false,
                            replacementPattern: '',
                            sandboxName: "$VERACODE_SANDBOX",
                            createSandbox: true,
                            scanExcludesPattern: '',
                            scanIncludesPattern: '',
                            scanName: "master-${currentBuild.number}-${currentBuild.startTimeInMillis}",
                            uploadExcludesPattern: '',
                            uploadIncludesPattern: '**/*.jar',
                            waitForScan: true,
                            vid: "$VERACODE_ID",
                            vkey: "$VERACODE_KEY"
                    }
                }
            }
        }
    }
    post {
        success {
            slackSend(color: '#00FF00', message: "SUCCESSFUL: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL})", channel: "${slackChannel}")
        }
        failure {
            slackSend(color: '#FF0000', message: "FAILED: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL})", channel: "${slackChannel}")
        }
    }
}
