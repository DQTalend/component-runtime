/**
 * Copyright (C) 2006-2024 Talend Inc. - www.talend.com
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// Imports
import java.time.LocalDateTime
import java.util.regex.Matcher

// Credentials
final def ossrhCredentials = usernamePassword(
    credentialsId: 'ossrh-credentials',
    usernameVariable: 'OSSRH_USER',
    passwordVariable: 'OSSRH_PASS')
final def nexusCredentials = usernamePassword(
    credentialsId: 'nexus-artifact-zl-credentials',
    usernameVariable: 'NEXUS_USER', passwordVariable: 'NEXUS_PASS')
final def jetbrainsCredentials = usernamePassword(
    credentialsId: 'jetbrains-credentials',
    usernameVariable: 'JETBRAINS_USER',
    passwordVariable: 'JETBRAINS_PASS')
final def jiraCredentials = usernamePassword(
    credentialsId: 'jira-credentials',
    usernameVariable: 'JIRA_USER',
    passwordVariable: 'JIRA_PASS')
final def gitCredentials = usernamePassword(
    credentialsId: 'github-credentials',
    usernameVariable: 'GITHUB_USER',
    passwordVariable: 'GITHUB_PASS')
final def dockerCredentials = usernamePassword(
    credentialsId: 'artifactory-datapwn-credentials',
    usernameVariable: 'DOCKER_USER',
    passwordVariable: 'DOCKER_PASS')
final def keyImportCredentials = usernamePassword(
    credentialsId: 'component-runtime-import-key-credentials',
    usernameVariable: 'KEY_USER',
    passwordVariable: 'KEY_PASS')
final def gpgCredentials = usernamePassword(
    credentialsId: 'component-runtime-gpg-credentials',
    usernameVariable: 'GPG_KEYNAME',
    passwordVariable: 'GPG_PASSPHRASE')

// In some cases the branch name is not valid, we define it here
final String branchName = env.BRANCH_NAME

// Job config
final Boolean isMasterBranch = branchName == 'master'
final Boolean isMaintenanceBranch = branchName.startsWith('maintenance/')
final Boolean isMilestone = params.ACTION == 'MILESTONE'
final String extraBuildParams = ""

// Job variables declaration
String pomVersion          // Declared version in the pom file
String releaseVersion      // Released version for the release
String nextVersion         // Final version after the release
String tagName             // created git tag name
String maintenanceVersion  // Final version after the release for created maintenance branch
String maintenanceBranch   // created maintenance branch name

pipeline {
  libraries {
    // Externals libraries used in this job
    // Connector lib from https://github.com/Talend/tdi-jenkins-shared-libraries
    lib("connectors-lib@main") // Defining jenkinsJobTools
  }

  agent {
    kubernetes {
      yamlFile '.jenkins/jenkins_pod.yml'
      defaultContainer 'main'
    }
  }

  environment {
    MAVEN_OPTS = "-Dformatter.skip=true -Dmaven.artifact.threads=256"
  }

  options {
    buildDiscarder(logRotator(artifactNumToKeepStr: '10', numToKeepStr: branchName == 'master' ? '15' : '10'))
    timeout(time: 180, unit: 'MINUTES')
    skipStagesAfterUnstable()
  }

  triggers {
    cron(branchName == "master" ? "0 12 * * *" : "")
  }

  parameters {
    choice(
        name: 'ACTION',
        choices: ['MILESTONE', 'GA'],
        description: """
          Type of release:
            MILESTONE: (default) classical milestone release 
              ex: 1.63.0M1 is release and master branch is bumped as 1.63.0M2
            GA: release for General Available
              ex: 1.63.0M9 is release as 1.63.0""")
    booleanParam(
        name: 'FAKE_RELEASE',
        defaultValue: true,
        description: '''For debug purposes, the job will deploy in:  
                        - Artifactory Dev instead of Artifactory Prod for docker images  
                        - Artifacts-zl instead of sonatype for java artefacts  
                        The job will not tag/commit on git''')
    string(
        name: 'EXTRA_BUILD_PARAMS',
        defaultValue: '',
        description: 'Add some extra parameters to maven commands. Applies to all maven calls.')
    booleanParam(
        name: 'JENKINS_DEBUG',
        defaultValue: false,
        description: 'Add an extra step to the pipeline allowing to keep the pod alive for debug purposes.')
  }

  stages {
    stage('Preliminary steps') {
      steps {

        ///////////////////////////////////////////
        // Login tasks
        ///////////////////////////////////////////
        script {
          withCredentials([gitCredentials]) {
            sh """ bash .jenkins/scripts/git_login.sh "\${GITHUB_USER}" "\${GITHUB_PASS}" """
          }
          withCredentials([dockerCredentials]) {
            // DOCKER_REGISTRY_HOST comes from global jenkins managed env var (in flux config)
            sh """ bash .jenkins/scripts/docker_login.sh "${DOCKER_REGISTRY_HOST}" "\${DOCKER_USER}" "\${DOCKER_PASS}" """
          }
          withCredentials([keyImportCredentials]) {
            sh """ bash .jenkins/scripts/setup_gpg.sh """
          }
        }

        ///////////////////////////////////////////
        // asdf install
        ///////////////////////////////////////////
        script {
          println "asdf install the content of repository .tool-versions'\n"
          sh 'bash .jenkins/scripts/asdf_install.sh'
        }

        ///////////////////////////////////////////
        // assemblyExtraBuildParams
        ///////////////////////////////////////////
        script {
          println "Create assemblyExtraBuildParams from user provided parameters and job option"
          assemblyExtraBuildParams(params.FAKE_RELEASE as Boolean)
        }

        ///////////////////////////////////////////
        // Updating build displayName and description
        ///////////////////////////////////////////
        script {
          jenkinsJobTools.job_name_creation("$params.ACTION")

          // updating build description
          String description = """
            Execute a $params.Action release.  
            Debug: $params.JENKINS_DEBUG  
            Extra build args: $extraBuildParams  """.stripIndent()
          jenkinsJobTools.job_description_append(description)

          if(params.FAKE_RELEASE){
            // updating build description
            description = """
            ---------------------------------------------------  
            This is a fake release:  
            - artefacts will be posted on artifact-zl  
            - docker image will be deployed on artifactory dev   
            ---------------------------------------------------  
            """.stripIndent()
            jenkinsJobTools.job_description_append(description)
          }
        }
      }
    }

    stage('Post login') {
      steps {
        withCredentials([gitCredentials,
                         dockerCredentials,
                         ossrhCredentials,
                         jetbrainsCredentials,
                         jiraCredentials,
                         gpgCredentials]) {
          script {
              // TODO try not to use this
             sh """\
               #!/usr/bin/env bash
               bash .jenkins/scripts/npm_fix.sh
             """.stripIndent()
          }
        }
      }
    }

    stage('Version management') {
      steps {
        ///////////////////////////////////////////
        // Pom version management
        ///////////////////////////////////////////
        script{

          echo 'Read the actual version in the pom'
          final def pom = readMavenPom file: 'pom.xml'
          pomVersion = pom.version

          echo 'Manage the release version '
          (releaseVersion, nextVersion,
          maintenanceVersion, maintenanceBranch) = get_release_milestone_info(pomVersion, isMaintenanceBranch, isMilestone)
          tagName = "component-runtime-${releaseVersion}"
        }

        ///////////////////////////////////////////
        // Updating build description with calculated info
        ///////////////////////////////////////////
        script {
          String description = """
            Actual Version $pomVersion will be release as $releaseVersion.  
            After the release the repository will be bumped as $nextVersion.  
            Debug: $params.JENKINS_DEBUG  
            Extra build args: $extraBuildParams""".stripIndent()
          jenkinsJobTools.job_description_append(description)
        }

        ///////////////////////////////////////////
        // Validate real release action
        ///////////////////////////////////////////
        script {
          if(!params.FAKE_RELEASE){
            String checkMsg = """
            You will do a REAL release  
            Actual Version $pomVersion will be release as $releaseVersion.  
            After the release the repository will be bumped as $nextVersion.  
            **Are you OK to continue?**""".stripIndent()

            // Request user action
            input message: "$checkMsg", ok: 'Yes'
          }

        }
      }
    }

    stage('Install BOM') {
      steps {
        withCredentials([nexusCredentials]) {
          script {

            echo "Preparing and installing BOM to release $releaseVersion from $pomVersion"
            //sh "bash .jenkins/scripts/release-1-install-bom.sh $releaseVersion $pomVersion"
          }
        }
      }
    }

    stage('Prepare release') {
      steps {
        withCredentials([nexusCredentials]) {
          script {

            echo "Maven prepare release $releaseVersion (next-dev: $nextVersion; tag: $tagName)"
            //sh "bash .jenkins/scripts/release-2-prepare.sh $releaseVersion $nextVersion $tagName $extraBuildParams"
          }
        }
      }
    }

    stage('Release') {
      steps {
        withCredentials([nexusCredentials,
                         ossrhCredentials]) {
          script {
            echo "Perform release"
            //sh "bash .jenkins/scripts/release-3-perform.sh $extraBuildParams"
          }
        }
      }
    }

    stage('Docker image creation') {
      steps {
        withCredentials([gitCredentials,
                         nexusCredentials,
                         ossrhCredentials,
                         dockerCredentials]) {
          script {
            echo "Docker image creation from branch $branchName with tag: $tagName on version $releaseVersion"
            //sh "bash .jenkins/scripts/release-4-docker-image-creation.sh"
          }
        }
      }
    }

    stage('Prepare next iteration') {
      steps {
        withCredentials([gitCredentials,
                         nexusCredentials,
                         ossrhCredentials]) {
          script {
            echo "Prepare next iteration on $branchName"
            //sh "bash .jenkins/scripts/release-4-prepare-next-iteration.sh $branchName"
          }
        }
      }
    }

    stage('Create maintenance branch') {
      when {
        expression { isMasterBranch && params.ACTION == "GA" }
      }
      steps {
        withCredentials([gitCredentials,
                         nexusCredentials,
                         ossrhCredentials]) {
          script {
            echo "Creating a new branch named $maintenanceBranch with version $maintenanceVersion"
            //sh "bash .jenkins/scripts/release-6-create-maintenance-branch.sh $maintenanceBranch $maintenanceVersion"
          }
        }
      }
    }
  }
  post {
    success {
      script {
        println "====== Publish Coverage"
        publishCoverage adapters: [jacocoAdapter('**/jacoco-aggregate/*.xml')]
        publishCoverage adapters: [jacocoAdapter('**/jacoco-it/*.xml')]
        publishCoverage adapters: [jacocoAdapter('**/jacoco-ut/*.xml')]
        println "====== Publish HTML API Coverage"
        publishHTML([
            allowMissing         : false,
            alwaysLinkToLastBuild: false,
            keepAll              : true,
            reportDir            : 'reporting/target/site/jacoco-aggregate',
            reportFiles          : 'index.html',
            reportName           : 'Coverage',
            reportTitles         : 'Coverage'
        ])
      }
    }

    always {
      script {
        alertingTools.slack_result(
            "acatoire",
            currentBuild.result,
            currentBuild.previousBuild.result,
            true, // Post for success and failure for release scripts
            true,
            "Failure of $pomVersion $params.Action release.")
      }

      script {
        println '====== Archive jacoco reports artifacts'
        // FIXME SET BACK archiveArtifacts artifacts: "${'**/jacoco-aggregate/**/*.*'}", allowEmptyArchive: true, onlyIfSuccessful: false
      }

      script {
        if (params.JENKINS_DEBUG) {
          jenkinsJobTools.jenkinsBreakpoint()
        }
      }
    }
  }
}

/**
 * Assembly all needed items to put inside extraBuildParams
 *
 * @param Boolean skip_doc, if set to true documentation build will be skipped
 *
 * @return extraBuildParams as a string ready for mvn cmd
 */
private String assemblyExtraBuildParams(Boolean fakeRelease) {
  String extraBuildParams

  println 'Processing extraBuildParams'
  final List<String> buildParamsAsArray = []

  if (params.EXTRA_BUILD_PARAMS) {
    buildParamsAsArray.add(params.EXTRA_BUILD_PARAMS as String)
  }

  // Manage fake release parameter
  if (fakeRelease) {
    buildParamsAsArray.add("--define scm.connection=scm:git:git://github.com/acatoire/component-runtime.git")
    buildParamsAsArray.add("--define scm.developerConnection=scm:git:git@github.com:acatoire/component-runtime.git")
    buildParamsAsArray.add("--define scm.url=https://github.com/talend/component-runtime")

    buildParamsAsArray.add("--define distributionManagement.repository.url=https://artifacts-zl.talend.com/nexus/content/repositories/snapshots/")
    buildParamsAsArray.add("--define distributionManagement.snapshotRepository.url=https://artifacts-zl.talend.com/nexus/content/repositories/snapshots/")
    buildParamsAsArray.add("--define repositories.snapshotRepository.url=https://artifacts-zl.talend.com/nexus/content/repositories/snapshots/")
  }


  println 'Construct final params content'
  extraBuildParams = buildParamsAsArray.join(' ')

  println "extraBuildParams: $extraBuildParams"

  return extraBuildParams
}


/**
 * Retrieves release and milestone information based on the provided current version.
 *
 * @param currentVersion       The current version string to evaluate (e.g., "1.65.0M1-SNAPSHOT").
 * @param maintenance          Indicates whether it is a maintenance release (true) or a main branch release (false).
 * @param milestoneIncrement   Indicates whether to increment the milestone number for the next version (applicable for main branch releases).
 * @return                     An ArrayList containing release and milestone information:
 *                               - Index 0: Release version.
 *                               - Index 1: Next development version.
 *                               - Index 2: Maintenance version (empty string for main branch releases).
 *                               - Index 3: Maintenance branch name (empty string for main branch releases).
 * @throws RuntimeException    Throws an exception if the provided version is invalid or incompatible.
 */
private static ArrayList<String> get_release_milestone_info(String currentVersion, Boolean maintenance, Boolean milestoneIncrement) {

  println("Evaluate release name from current version: $currentVersion")

  if(maintenance && milestoneIncrement){
    throw new RuntimeException("It is not possible to release a milestone for maintnance branch.")
  }

  // Split the version (ex: "1.65.0M1-SNAPSHOT") on 'M' or '-'
  def parts = currentVersion.split(/[M-]/)
  String releaseVersion = parts[0]

  int milestoneNumber = 0
  if (! maintenance){
    if (currentVersion.contains('M')){
      // The version is correct, use it
      milestoneNumber = parts[1] as int
    }
    else{
      // The version is not correct, raise error
      throw new RuntimeException("Provided version $currentVersion is not a milestone version (no 'M').")
    }
  }
  else{
    if (currentVersion.contains('M')){
      // The version is not correct, raise error
      throw new RuntimeException("Provided version $currentVersion is not a maintenance version (contains 'M').")
    }
  }
  println("Milestone number : $milestoneNumber")


  releaseVersion = releaseVersion.replaceAll(/M\d+/, "")
  println("Release version : $releaseVersion")

  // Get maj/min/rev
  def (maj, min, rev) = releaseVersion.tokenize('.').collect { it as int }

  // Calculate variables according to branch
  String maintenanceBranch = ""
  String maintenanceVersion = ""
  String devVersion

  if (! maintenance) {
    // master relase
    // This is a release of main branch, the maintenance branch will need to be created.
    maintenanceBranch = "maintenance/${maj}.${min}"
    maintenanceVersion = "${maj}.${min}.${rev + 1}-SNAPSHOT"

    if(milestoneIncrement){
      milestoneNumber++
    }
    else{
      min++
      rev = 0
    }
    // Calculate the next development version
    devVersion = "${maj}.${min}.${rev}M${milestoneNumber}-SNAPSHOT"

    println("Maintenance version : $releaseVersion")
    println("Maintenance branch name : $maintenanceBranch")


  } else {
    // Maintenance release
    rev++
    // Calculate the next development version
    devVersion = "${maj}.${min}.${rev}-SNAPSHOT"
  }

  println("Next version : devVersion")

  return [releaseVersion, devVersion, maintenanceVersion, maintenanceBranch]
}

//println get_release_milestone_info("1.65.0M1-SNAPSHOT", false, true) // milestone
//println get_release_milestone_info("1.65.0M1-SNAPSHOT", false, false) // release
//println get_release_milestone_info("1.65.1-SNAPSHOT", true, false) // maintenance
//println get_release_milestone_info("1.65.1M1-SNAPSHOT", true, false) // maintenance, but version not valid
//println get_release_milestone_info("1.65.1-SNAPSHOT", true, true) // maintenance, but milestone not valid
//println get_release_milestone_info("1.65.1-SNAPSHOT", false, true) // milestone, but version not valid
//println get_release_milestone_info("1.65.1-SNAPSHOT", false, false) // release, but version not valid


