//
//  Copyright (C) 2006-2022 Talend Inc. - www.talend.com
//
//  Licensed under the Apache License, Version 2.0 (the "License");
//  you may not use this file except in compliance with the License.
//  You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
//  Unless required by applicable law or agreed to in writing, software
//  distributed under the License is distributed on an "AS IS" BASIS,
//  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//  See the License for the specific language governing permissions and
//  limitations under the License.
//

final String podLabel = ((String) "tck-api-test-${UUID.randomUUID().toString()}").take(53)

final def nexusCredentials = usernamePassword(
    credentialsId: 'nexus-artifact-zl-credentials',
    usernameVariable: 'NEXUS_USER',
    passwordVariable: 'NEXUS_PASSWORD')

final def tenantId_Rd = string(
    credentialsId: 'component-runtime-api-tenant-id-rd',
    variable: 'componentRuntimeApiTenantId_Rd'
)

final String tsbiImage = 'jdk11-svc-springboot-builder'
final String tsbiVersion = '2.9.18-2.4-20220104141654'


final String serverPort = "8081"
final String serverLog = "component_server.log"
final String serverTimeout = "1"

// Default value for parameters
String runtimeVersion = "default"
String branchToUse = "acatoire/TCOMP-2163_Component_Runtime_API_test"  // TODO set master before the first PR merge
String apiTesterEnv = "component_runtime_ci"
String fileToRun = "tcomp_approved"
String tenantInstance = "eu"

pipeline {
  agent {
    kubernetes {
      label podLabel
      yaml """
        apiVersion: v1
        kind: Pod
        spec:
          containers:
            - name: '${tsbiImage}'
              image: 'artifactory.datapwn.com/tlnd-docker-dev/talend/common/tsbi/${tsbiImage}:${tsbiVersion}'
              command: [ cat ]
              tty: true
              volumeMounts: [
                { name: docker, mountPath: /var/run/docker.sock },
                { name: efs-jenkins-component-runtime-m2, mountPath: /root/.m2/repository },
                { name: dockercache, mountPath: /root/.dockercache }
              ]
              resources: { requests: { memory: 3G, cpu: '2' }, limits: { memory: 8G, cpu: '2' } }
          volumes:
            - name: docker
              hostPath: { path: /var/run/docker.sock }
            - name: efs-jenkins-component-runtime-m2
              persistentVolumeClaim:
                    claimName: efs-jenkins-component-runtime-m2
            - name: dockercache
              hostPath: { path: /tmp/jenkins/tdi/docker }
          imagePullSecrets:
            - name: talend-registry
           """.stripIndent()
    }
  }

  environment {
    MAVEN_SETTINGS = "${WORKSPACE}/.jenkins/settings.xml"
    DECRYPTER_ARG = "-Dtalend.maven.decrypter.m2.location=${env.WORKSPACE}/.jenkins/"
    MAVEN_OPTS = [
        "-Dmaven.artifact.threads=128",
        "-Dorg.slf4j.simpleLogger.showDateTime=true",
        "-Dorg.slf4j.simpleLogger.showThreadName=true",
        "-Dorg.slf4j.simpleLogger.dateTimeFormat=HH:mm:ss",
        "-Dtalend-image.layersCacheDirectory=/root/.dockercache"
    ].join(' ')

    APP_ID = '579232'
    TALEND_REGISTRY = "artifactory.datapwn.com"
    TESTCONTAINERS_HUB_IMAGE_NAME_PREFIX = "artifactory.datapwn.com/docker-io-remote/"

    ROOT_PATH = "${WORKSPACE}"
    SCRIPTS_PATH = "${WORKSPACE}/talend-component-maven-plugin/src/it/web/.jenkins/scripts"
    TESTS_PATH = "${WORKSPACE}/test_scenarios/talend-component-maven-plugin/src/it/web/test"
    CONNECTORS_PATH = "${WORKSPACE}/connectors"
    TESTED_CONNECTOR_PATH = "${CONNECTORS_PATH}/azure/azure-dls-gen2"
  }

  options {
    buildDiscarder(logRotator(artifactNumToKeepStr: '30', numToKeepStr: '30'))
    timeout(time: 180, unit: 'MINUTES')
    skipStagesAfterUnstable()
    //timestamps ()
  }

  stages {
    stage('Validate parameters') {
      steps {
        container(tsbiImage) {

          ///////////////////////////////////////////
          // Get the user name
          ///////////////////////////////////////////
          wrap([$class: 'BuildUser']) {
            script {
              try {
                USER_NAME = "${BUILD_USER}"
              }
              catch (groovy.lang.MissingPropertyException ignored) {
                USER_NAME = "auto"
              }
            }
          }
          ///////////////////////////////////////////
          // Validate parameters
          ///////////////////////////////////////////
          script {
            // RUNTIME_VERSION
            try {
              runtimeVersion = "${RUNTIME_VERSION}"
            }
            catch (groovy.lang.MissingPropertyException ignored) {
              echo "RUNTIME_VERSION not supplied, default value will be used ($runtimeVersion)"
            }
            // TEST_BRANCH
            try {
              branchToUse = "${TEST_BRANCH}".replace("origin/", "") // Remove "origin/" prefix to avoid double in script
            }
            catch (groovy.lang.MissingPropertyException ignored) {
              echo "TEST_BRANCH not supplied, default value will be used ($branchToUse)"
            }
            // FILE_TO_RUN
            try {
              fileToRun = "${PROJECT_NAME}"
            }
            catch (groovy.lang.MissingPropertyException ignored) {
              echo "PROJECT_NAME not supplied, default value will be used ($fileToRun)"
            }
          }
          ///////////////////////////////////////////
          // Print build config
          ///////////////////////////////////////////
          script {

            println("Job info:\n" +
                " - Tenant instance: ${tenantInstance}\n" +
                " - Runtime version: ${runtimeVersion}\n" +
                " - Test branch: ${branchToUse}\n" +
                " - Test file executed: ${fileToRun}" + ".json\n" +
                " - API Tester used environment: ${apiTesterEnv}\n")

            println("Talend Test Orchestrator info:\n" +
                "PLATFORM: ${params.PLATFORM}\n" +
                "ENVIRONMENT: ${params.ENVIRONMENT}\n" +
                "FRAGMENT_URL: ${params.FRAGMENT_URL}\n" +
                "DEPLOYMENT_UNIT: ${params.DEPLOYMENT_UNIT}\n" +
                "CYCLE: ${params.CYCLE}\n" +
                "DEPLOYED_PRODUCTS: ${params.DEPLOYED_PRODUCTS}")

            def runtimeName = "master"
            if (runtimeVersion != "") {
              runtimeName = runtimeVersion
            }
            // updating build displayName
            currentBuild.displayName = (
                "#" + currentBuild.number +
                    ": " + branchToUse
            )
            // updating build description
            currentBuild.description = (
                "User: " + "${USER_NAME}" + " - " + "Runtime: " + runtimeName + "\n" +
                    "Branch: " + branchToUse + "\n" +
                    "Test batch: " + fileToRun + "\n"
            )
          }
        }
      }
    }

    stage('Test Checkout') {
      steps {
        container(tsbiImage) {
          // Checkout of the connector directory (TODO Will be cleaned when test component will be ready)
          checkout([
              $class           : 'GitSCM',
              branches         : [[name: '*/master']],
              extensions       : [
                  [$class: 'RelativeTargetDirectory', relativeTargetDir: './connectors'],
                  [$class: 'CleanBeforeCheckout', deleteUntrackedNestedRepositories: true]
              ],
              userRemoteConfigs: [[credentialsId: 'github-ssh', url: 'git@github.com:Talend/connectors-se.git']]
          ])
          // Checkout of the test directory from API Tester
          checkout([
              $class           : 'GitSCM',
              branches         : [[name: "*/${branchToUse}"]],
              extensions       : [
                  [$class: 'RelativeTargetDirectory', relativeTargetDir: './test_scenarios'],
                  [$class: 'CleanBeforeCheckout', deleteUntrackedNestedRepositories: true],
                  //[$class: 'CloneOptions', shallow: true, depth: 1, noTags: true],
                  [$class: 'SparseCheckoutPaths', sparseCheckoutPaths: [[path: 'talend-component-maven-plugin/src/it/web/test']]]
              ],
              userRemoteConfigs: [[credentialsId: 'github-ssh', url: 'git@github.com:Talend/component-runtime.git']]
          ])
        }
      }
    }

    stage('Prepare build') {
      steps {
        container(tsbiImage) {
          script {
            sh """
              echo >>>>> Build the connector
              chmod +x ${SCRIPTS_PATH}/pom-edit.sh
              ${SCRIPTS_PATH}/pom-edit.sh ${runtimeVersion} ${CONNECTORS_PATH}

              cd ${TESTED_CONNECTOR_PATH}
              mvn clean install -U\
                                -T3C\
                                -Dspotless.apply.skip=true\
                                -Dspotbugs.skip=true\
                                -Dcheckstyle.skip=true\
                                -Drat.skip=true\
                                -DskipTests\
                                -Dmaven.javadoc.skip=true\
                                -Dinvoker.skip=true\
                                -Dmaven.artifact.threads=25

              echo >>>>> TCK component server start
              chmod +x ${SCRIPTS_PATH}/server-start.sh
              ${SCRIPTS_PATH}/server-start.sh ${TESTED_CONNECTOR_PATH} ${serverLog} ${serverPort} ${serverTimeout} &
    
              chmod +x ${SCRIPTS_PATH}/server-check.sh
              ${SCRIPTS_PATH}/server-check.sh ${serverPort}
  
              cat ${TESTED_CONNECTOR_PATH}/${serverLog}
            """
          }
        }
      }
    }

    stage('Build') {
      steps {
        container(tsbiImage) {
          withCredentials([nexusCredentials, tenantId_Rd]) {
            sh """
              echo >>>>> Execute test
              cd ${TESTS_PATH}
              mvn clean test --settings=${MAVEN_SETTINGS} \
                             --define instance=${tenantInstance} \
                             --define accountId=${componentRuntimeApiTenantId_Rd} \
                             --define selectedEnvironment=${apiTesterEnv} \
                             --define stopOnFailure=false \
                             --define file=${fileToRun}.json
              """
          }
        }
      }
    }
    stage('Post Build') {
      steps {
        container(tsbiImage) {
          sh """
              echo >>>>> Generate Html reports
              mvn surefire-report:report-only -f ${TESTS_PATH}
              mvn site -DgenerateReports=false -f ${TESTS_PATH}
              """
        }
      }
    }

    post {
      always {
        container(tsbiImage) {
          archiveArtifacts(
              artifacts: """\
          **/${serverLog}, 
          **/target/surefire-reports/*, 
          **/target/site/**/*, 
          **/test_scenarios/**/*""".stripIndent()
          )
          recordIssues(
              enabledForFailure: true,
              tools: [
                  taskScanner(
                      id: 'todo-src',
                      name: 'Src - Known/Fixme/Todo',
                      includePattern: '**/src/it/web/test/**/*.json',
                      ignoreCase: true,
                      highTags: '@Disabled',
                      normalTags: 'FIX_ME, FIXME',
                      lowTags: 'TO_DO, TODO'
                  ),
                  junitParser(
                      id: 'unit-test',
                      name: 'Unit Test',
                      pattern: '**/src/it/web/test/target/surefire-reports/**/*.xml'
                  ),
                  mavenConsole(
                      id: 'maven-build',
                      name: 'Maven Build'
                  ),
              ]
          )
        }
      }
    }
  }
}
