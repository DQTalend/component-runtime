//
//  Copyright (C) 2006-2022 Talend Inc. - www.talend.com
//
//  Licensed under the Apache License, Version 2.0 (the "License");
//  you may not use this file except in compliance with the License.
//  You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
//  Unless required by applicable law or agreed to in writing, software
//  distributed under the License is distributed on an "AS IS" BASIS,
//  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//  See the License for the specific language governing permissions and
//  limitations under the License.
//

/**
 * job-dsl plugin page api documentation for this project
 * https://jenkins-connectors.datapwn.com/plugin/job-dsl/api-viewer/index.html
 * REM on naming:
 *   - All constants have been prefix with "_" not to be confound with env variables
 */

/**
 * Pod configuration
 */
// TODO move to custom builder
final String _TSBI_IMAGE = 'jdk11-svc-springboot-builder'
final String _TSBI_VERSION = '2.9.18-2.4-20220104141654'

/**
 * Job configuration
 */
// Local folder location
final String _SERVER_PORT="8081"
final String _INSTALL_DIR="webtester"
final String _COVERAGE_DIR="coverage"
final String _DOWNLOAD_DIR="/tmp/download" // volume mounted on the podConfiguration
final String _SERVER_DIR="${_INSTALL_DIR}/component-server-distribution"
// Local artifact definition
final String _ARTIFACT_TEST_RESULTS="**/src/it/web/test/target/**/*"
final String _ARTIFACT_COVERAGE="**/${_COVERAGE_DIR}/**/*"
final String _ARTIFACT_LOGS_COMPONENT_SERVER="**/${_SERVER_DIR}/logs/component-server*"
final String _ARTIFACT_LOGS_MEECROWAVE="**/${_SERVER_DIR}/logs/meecrowave*"
final String _ARTIFACT_SETENV="**/${_SERVER_DIR}/bin/setenv.sh"
final String _ARTIFACT_REGISTRY="**/${_SERVER_DIR}/conf/components-registry.properties"

final String _POD_CONFIGURATION = """
  apiVersion: v1
  kind: Pod
  spec:
    containers:
      - name: '${_TSBI_IMAGE}'
        image: 'artifactory.datapwn.com/tlnd-docker-dev/talend/common/tsbi/${_TSBI_IMAGE}:${_TSBI_VERSION}'
        command: [ cat ]
        tty: true
        volumeMounts: [
          { name: docker, mountPath: /var/run/docker.sock },
          { name: efs-jenkins-component-runtime-m2, mountPath: /root/.m2/repository },
          { name: efs-jenkins-component-runtime-download, mountPath: ${_DOWNLOAD_DIR}},
          { name: dockercache, mountPath: /root/.dockercache }
        ]
        resources: { requests: { memory: 3G, cpu: '2' }, limits: { memory: 8G, cpu: '2' }}
    volumes:
      - name: docker
        hostPath: { path: /var/run/docker.sock }
      - name: dockercache
        hostPath: { path: /tmp/jenkins/tdi/docker }
      - name: efs-jenkins-component-runtime-m2
        persistentVolumeClaim:
          claimName: efs-jenkins-component-runtime-m2
      - name: efs-jenkins-component-runtime-download
        persistentVolumeClaim:
          claimName: efs-jenkins-component-runtime-download
    imagePullSecrets:
      - name: talend-registry
"""

/**
 * Credentials
 */

final def _NEXUS_CREDENTIALS = usernamePassword(
    credentialsId: 'nexus-artifact-zl-credentials',
    usernameVariable: 'NEXUS_USER',
    passwordVariable: 'NEXUS_PASSWORD')

final def _TENANT_ID_RD = string(
    credentialsId: 'component-runtime-api-tenant-id-rd',
    variable: 'componentRuntimeApiTenantId_Rd'
)

/**
 * Options
 */
String _API_TEST_RESULT_PATTERN = '**/src/it/web/test/target/surefire-reports/**/*.xml'
String _API_TEST_FILES_PATTERN = '**/src/it/web/test/**/*.json'

// Default value for parameters
String runtimeVersion = "default"
String apiTesterEnv = "component_runtime_ci"
String fileToRun = "tcomp_approved"
String tenantInstance = "eu"

/**
 * The pipeline
 */
pipeline {
  /**
   * agent
   */
  agent {
    kubernetes {
      yaml _POD_CONFIGURATION
      defaultContainer _TSBI_IMAGE
    }
  }
  /**
   * parameters
   */
  parameters {
    string(
      name: 'CYCLE',
      defaultValue: 'default',
      description: 'Test Cycle Id filled by Test Orchestrator, it is only important for TTO.'
    )
    string(
      name: 'RUNTIME_VERSION',
      defaultValue: 'default',
      description: 'Choose the component-runtime.version to be used from Nexus. Keep default to use the pom version (1.45.0 minimum) or an other ex: 1.45.0-SNAPSHOT'
    )
    choice(
      name: 'PROJECT_NAME' ,
      choices: ['tcomp_approved', 'tcomp_draft'] ,
      description: 'Select test project to execute.'
    )
    booleanParam(
      name: 'JENKINS_DEBUG',
      defaultValue: false,
      description: '''
        Add an extra comportment to the job allowing to extra analysis:
          - keep the pod alive for debug purposes at the end
          - activate some extra log artifacts''')
  }
  /**
   * environment
   */
  environment {
    APP_ID = '579232'
    TALEND_REGISTRY = "artifactory.datapwn.com"
    TESTCONTAINERS_HUB_IMAGE_NAME_PREFIX = "artifactory.datapwn.com/docker-io-remote/"

    final String _ROOT_PATH = "${WORKSPACE}"
    final String _SCRIPTS_PATH = "${_ROOT_PATH}/talend-component-maven-plugin/src/it/web/.jenkins/scripts"
    final String _TESTS_PATH = "${_ROOT_PATH}/talend-component-maven-plugin/src/it/web/test"

    MAVEN_SETTINGS = "${_ROOT_PATH}/talend-component-maven-plugin/src/it/web/.jenkins/settings.xml"
    DECRYPTER_ARG = "--define talend.maven.decrypter.m2.location=${_ROOT_PATH}/.jenkins/"
    MAVEN_OPTS = [
      "-Dmaven.artifact.threads=128",
      "-Dorg.slf4j.simpleLogger.showDateTime=true",
      "-Dorg.slf4j.simpleLogger.showThreadName=true",
      "-Dorg.slf4j.simpleLogger.dateTimeFormat=HH:mm:ss",
      "-Dtalend-image.layersCacheDirectory=/root/.dockercache"
    ].join(' ')

  }
  /**
   * options
   */
  options {
    buildDiscarder(logRotator(artifactNumToKeepStr: '30', numToKeepStr: '30'))
    timeout(time: 180, unit: 'MINUTES')
    skipStagesAfterUnstable()
  }
  /**
   * stages
   */
  stages {
    stage('Validate parameters') {
      steps {
        ///////////////////////////////////////////
        // Validate parameters
        ///////////////////////////////////////////
        script {

          println "Setup all script as executables in ${_SCRIPTS_PATH}\n"
          sh """
            find ${_SCRIPTS_PATH} -type f -iname "*.sh" -exec chmod +x {} \\;
          """

          println "Get actual tck version from ${_ROOT_PATH}/pom.xml: \n"
          TCOMP_VERSION = sh (
            script: "${_SCRIPTS_PATH}/pom-get-version.sh ${_ROOT_PATH}/pom.xml",
            returnStdout: true
          ).trim()

          println "TCOMP_VERSION on the pom file is ${TCOMP_VERSION}\n"

          // RUNTIME_VERSION
          try {
            runtimeVersion = "${RUNTIME_VERSION}"
          }
          catch (groovy.lang.MissingPropertyException ignored) {
            runtimeVersion = "default"
          }

          println "Requested TCOMP_VERSION is ${runtimeVersion}\n"

          if (runtimeVersion == "default") {
            runtimeVersion = "${TCOMP_VERSION}"
            println "RUNTIME_VERSION not supplied, local value will be used (${runtimeVersion})\n"
          }

          // FILE_TO_RUN
          try {
            fileToRun = "${PROJECT_NAME}"
          }
          catch (groovy.lang.MissingPropertyException ignored) {
            println "PROJECT_NAME not supplied, default value will be used (${fileToRun})\n"
          }
        }
        ///////////////////////////////////////////
        // Print build config
        ///////////////////////////////////////////
        script {

          println("Job info:\n" +
              " - Tenant instance: ${tenantInstance}\n" +
              " - Runtime version: ${runtimeVersion}\n" +
              " - Test file executed: ${fileToRun}" + ".json\n" +
              " - API Tester used environment: ${apiTesterEnv}\n")

          println("Talend Test Orchestrator info:\n" +
              "PLATFORM: ${params.PLATFORM}\n" +
              "ENVIRONMENT: ${params.ENVIRONMENT}\n" +
              "FRAGMENT_URL: ${params.FRAGMENT_URL}\n" +
              "DEPLOYMENT_UNIT: ${params.DEPLOYMENT_UNIT}\n" +
              "CYCLE: ${params.CYCLE}\n" +
              "DEPLOYED_PRODUCTS: ${params.DEPLOYED_PRODUCTS}")
        }
        ///////////////////////////////////////////
        // Updating build displayName and description
        ///////////////////////////////////////////
        script {

          String user_name = currentBuild.getBuildCauses('hudson.model.Cause$UserIdCause').userId[0]
          if ( user_name == null) { user_name = "auto" }

          currentBuild.displayName = (
            "#$currentBuild.number: $user_name - $runtimeVersion"
          )

          // updating build description
          currentBuild.description = ("""
            User: $user_name - Runtime: $runtimeVersion
            Project: $fileToRun
            Debug: $params.JENKINS_DEBUG""".stripIndent()
          )
        }

      }
    }
    stage('Prepare Test') {
      steps {
        withCredentials([_NEXUS_CREDENTIALS]) {
          script {
            if (runtimeVersion.contains('-SNAPSHOT')) {
              sh """ "${_SCRIPTS_PATH}/tcomp-build.sh" "${_ROOT_PATH}/pom.xml" """
            }

            // TODO: TCOMP-2253 move from "azure-dls-gen2" to local build of the demo connector
            sh """
              "${_SCRIPTS_PATH}/server-registry-init.sh" "${_DOWNLOAD_DIR}" "${_INSTALL_DIR}" "${_COVERAGE_DIR}" \
                                                         "${runtimeVersion}" \
                                                         "1.36.0" "azure-dls-gen2" \
                                                         "1.53.0-SNAPSHOT" \
                                                         "${_SERVER_PORT}"
              "${_SCRIPTS_PATH}/server-registry-start.sh" "${_INSTALL_DIR}" "${_COVERAGE_DIR}" "${_SERVER_PORT}"
            """
          }
        }
      }
    }
    post{
      script {
        println "Artifact SETENV: ${_ARTIFACT_SETENV}\\n"
        archiveArtifacts artifacts: "${_ARTIFACT_SETENV}", allowEmptyArchive: false, onlyIfSuccessful: false
        println "Artifact REGISTRY: ${_ARTIFACT_REGISTRY}\\n"
        archiveArtifacts artifacts: "${_ARTIFACT_REGISTRY}", allowEmptyArchive: false, onlyIfSuccessful: false
      }
    }

    stage('Execute Test') {
      steps {
        withCredentials([_NEXUS_CREDENTIALS, _TENANT_ID_RD]) {
          sh """              
             ${_SCRIPTS_PATH}/server-check.sh ${_SERVER_PORT}

             printf "======== Execute test\n"
             cd ${_TESTS_PATH}
             mvn clean test --settings="${MAVEN_SETTINGS}" \
                            --define instance="${tenantInstance}" \
                            --define accountId="${componentRuntimeApiTenantId_Rd}" \
                            --define selectedEnvironment="${apiTesterEnv}" \
                            --define stopOnFailure=false \
                            --define file="${fileToRun}.json"
             """
        }
      }
    }
    post{
      script{
        println "Artifact TEST_RESULTS: ${_ARTIFACT_TEST_RESULTS}\\n"
        archiveArtifacts artifacts: "${_ARTIFACT_TEST_RESULTS}", allowEmptyArchive: false, onlyIfSuccessful: false
        println "Artifact COVERAGE: ${_ARTIFACT_COVERAGE}\\n"
        archiveArtifacts artifacts: "${_ARTIFACT_COVERAGE}", allowEmptyArchive: false, onlyIfSuccessful: false
      }
    }
  }
  /**
   * post stages
   */
  post {
    always {

      script {
        sh """
          printf "======== Stop server\n"
          ${_SCRIPTS_PATH}/server-registry-stop.sh ${_INSTALL_DIR}

          printf "======== Generate jacoco report \n"
          ${_SCRIPTS_PATH}/jacoco-report.sh ${_INSTALL_DIR} ${_COVERAGE_DIR}

          printf "======== Generate Html reports\n"
          mvn surefire-report:report-only --file ${_TESTS_PATH}
          mvn site --define generateReports=false --file ${_TESTS_PATH}
        """
      }

      // recordIssues is a multi result file publisher allowing to have the same publish format on multiples analysis.
      recordIssues (
        enabledForFailure: true,
        tools: [
          // Scan and publish to do and fix me in api test files
          taskScanner(
            id: 'todo-tck-api-test',
            name: 'api-test Todo(low)/Fixme(high)',
            includePattern: _API_TEST_FILES_PATTERN,
            ignoreCase: true,
            highTags: 'FIX_ME, FIXME',
            lowTags: 'TO_DO, TODO'
          ),
          // Publish api tests as junit
          junitParser(
            id: 'unit-test',
            name: 'tcomp API Test',
            pattern: _API_TEST_RESULT_PATTERN
          )
        ]
      )

      // Talend Test Orchestrator only work with the basic junit plugin
      // TODO: TTO-562 - Implement recordIssues in TTO to stop using junit
      junit(
          checksName: 'tcomp API Test for tto',
          keepLongStdio: true, // Any standard output or error from will be retained in the test results after the build completes.
          testResults: _API_TEST_RESULT_PATTERN,
          skipMarkingBuildUnstable: false  // junitParser already publish job status
      )

      script {
        println "====== Publish API Coverage"
        publishCoverage adapters: [jacocoAdapter("**/coverage/report.xml")]
        println "====== Publish HTML API Coverage"
        publishHTML([
            allowMissing         : false,
            alwaysLinkToLastBuild: false,
            keepAll              : true,
            reportDir            : "${_COVERAGE_DIR}/html",
            reportFiles          : 'index.html',
            reportName           : 'API Coverage',
            reportTitles         : 'API Coverage'
        ])
      }

      script {
        if (params.JENKINS_DEBUG) {
          // FIXME: TCOMP-2244	Meecrowave stop doesn't work so the artifact cmd is failing (file nos accessible)
          println "Artifact LOGS_COMPONENT_SERVER: ${_ARTIFACT_LOGS_COMPONENT_SERVER}\\n"
          archiveArtifacts artifacts: "${_ARTIFACT_LOGS_COMPONENT_SERVER}", allowEmptyArchive: false, onlyIfSuccessful: false
          println "Artifact LOGS_MEECROWAVE: ${_ARTIFACT_LOGS_MEECROWAVE}\\n"
          archiveArtifacts artifacts: "${artifact_logs_meecrowave}", allowEmptyArchive: false, onlyIfSuccessful: false
        }
      }

      script {
        if (params.JENKINS_DEBUG) {
        println "====== Debug optional step"
        sh """
          ls "${distribution_dir}/logs/"
          printf "--------------------------------------------------------------------------------------------------\\n"
          cat "${distribution_dir}/logs/component-server.log"
          printf "--------------------------------------------------------------------------------------------------\\n"
          cat "${distribution_dir}/logs/meecrowave.out"
        """
        }
      }

      script {
        if (params.JENKINS_DEBUG) {
          jenkinsBreakpoint()
        }
      }
    }
  }
}
