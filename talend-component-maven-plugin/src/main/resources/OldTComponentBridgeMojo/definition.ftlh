//
// This class was generated by talend component maven plugin
//
<#if definition.packageName?has_content>
package ${definition.packageName};
</#if>

import java.net.URL;
import java.net.MalformedURLException;
import java.util.EnumSet;
import java.util.Set;

import org.talend.daikon.definition.DefinitionImageType;
import org.talend.daikon.properties.property.Property;
import org.talend.daikon.runtime.RuntimeInfo;
import org.talend.components.api.component.AbstractComponentDefinition;
import org.talend.components.api.component.ConnectorTopology;
import org.talend.components.api.component.runtime.DependenciesReader;
import org.talend.components.api.component.runtime.ExecutionEngine;
import org.talend.components.api.component.runtime.JarRuntimeInfo;
import org.talend.components.api.exception.ComponentException;
import org.talend.components.api.properties.ComponentProperties;

public class ${definition.className} extends AbstractComponentDefinition {
    public ${definition.className}() {
        super("${definition.family}_${definition.name}", true/*all engines*/);
    }

    @Override
    public Class<? extends ComponentProperties> getPropertyClass() {
        return ${definition.propertiesClassName}.class;
    }

    @Override
    public String[] getFamilies() {
        return new String[] {<#list definition.categories as item>
           "${item}"<#sep>,</#sep></#list>
       };
    }

    @Override
    public Property[] getReturnProperties() {
        return new Property[0];
    }

    @Override
    public RuntimeInfo getRuntimeInfo(final ExecutionEngine engine, final ComponentProperties properties, final ConnectorTopology connectorTopology) {
        try {
            return new JarRuntimeInfo(
                new URL("mvn:${generatedGroupId}/${runtimeArtifactId}/${generatedVersion}"),
                DependenciesReader.computeDependenciesFilePath("${generatedGroupId}", "${runtimeArtifactId}"),
                "${definition.runtimeClassName}");
        } catch (final MalformedURLException e) {
            throw new ComponentException(e);
        }
    }

    @Override
    public Set<ConnectorTopology> getSupportedConnectorTopologies() {
        return EnumSet.of(<#list definition.topologies as item>
          ConnectorTopology.${item}<#sep>,</#sep></#list>);
    }
    <#if definition.iconExists>

    @Override
    public String getImagePath(final DefinitionImageType type) {
        switch (type) {
            case PALETTE_ICON_32X32:
                return getIconKey() + "_icon32.png";
            default:
                return null;
        }
    }
    </#if>
    <#if definition.icon?has_content>

    @Override
    public String getIconKey() {
        return "${definition.icon}";
    }
    </#if>
}
