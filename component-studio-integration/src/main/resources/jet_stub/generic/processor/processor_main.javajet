<%/*
  Copyright (C) 2006-2018 Talend Inc. - www.talend.com
   Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
*/%>
<%@ jet
    imports="
        org.talend.core.model.process.INode
        org.talend.designer.codegen.config.CodeGeneratorArgument
        org.talend.core.model.process.ElementParameterParser
        org.talend.core.model.process.IElementParameter
        org.talend.core.model.process.EParameterFieldType
        org.talend.core.model.metadata.IMetadataColumn
        org.talend.core.model.metadata.IMetadataTable
        org.talend.core.model.process.IConnection
        org.talend.core.model.process.IConnectionCategory
        org.talend.core.model.process.EConnectionType
        java.util.List
    "
%>
<%
final CodeGeneratorArgument codeGenArgument = CodeGeneratorArgument.class.cast(argument);
final INode node = INode.class.cast(codeGenArgument.getArgument());
final String cid = node.getUniqueName();
%>

final org.talend.sdk.component.runtime.output.InputFactory inputs_<%=cid%> = new org.talend.sdk.component.runtime.output.InputFactory() {
    private final java.util.Iterator<java.util.concurrent.atomic.AtomicReference<?>> values = new java.util.ArrayList<java.util.concurrent.atomic.AtomicReference<?>>() {{
        <%
        for (final IConnection connection : node.getIncomingConnections(EConnectionType.FLOW_MAIN)) {
        %>
        // <%= connection.getName() %> Main input
        add(<%= connection.getName() %>InputRef_<%=cid%>);
        <%
        }
        %>
    }}.iterator();

    @Override
    public Object read(final String name) {
        final Object value = values.hasNext() ? values.next().get() : null;
        if (value == null) {
            return null;
        }
        return javax.json.JsonValue.class.isInstance(value) ?
                javax.json.JsonValue.class.cast(value) :
                jsonb_<%=cid%>.fromJson(jsonb_<%=cid%>.toJson(value), javax.json.JsonValue.class);
    }
};


outputHandler_<%=cid%>.reset();
processor_<%=cid%>.onElement(inputs_<%=cid%>, outputs_<%=cid%>);
<%
// once processed update all outputs
for (final IConnection connection : node.getOutgoingSortedConnections()) {
    if (connection.getLineStyle() != EConnectionType.FLOW_MAIN) {
        continue;
    }
%>
<%= connection.getName() %> = outputHandler_<%=cid%>.getValue("<%= connection.getName() %>", <%= connection.getName() %>Struct.class);
<% } %>

nbLineInput_<%=cid%>++;
globalMap.put("<%=cid %>_NB_LINE", nbLineInput_<%=cid%>);