<%/*
  Copyright (C) 2006-2017 Talend Inc. - www.talend.com
   Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
*/%>
final java.util.Map<String, String> configuration_<%=cid%> = new java.util.HashMap<>();
<%
    final List<ElementParameter> params = List.class.cast(node.getElementParametersWithChildrens());
    if (params != null && !params.isEmpty()) {
        for (final ElementParameter p : params) {
            Object pluginValue = p.getTaggedValue("org.talend.sdk.component.source");
            if(pluginValue == null || !String.class.cast(pluginValue).equalsIgnoreCase("tacokit")) {
                continue;
            }
            //TODO: modify this part for Maps and nested lists.
            if (p.getFieldType() == EParameterFieldType.TABLE) {
                java.util.List<java.util.Map<String, Object>> tableValues = (java.util.List<java.util.Map<String, Object>>) ElementParameterParser.getObjectValue(node, p.getName());
                String[] items = p.getListItemsDisplayCodeName();
                String tableName = p.getName().replace('$', '.');
                String tableNamePrefix = tableName + "[].";
                for (int i = 0; i < tableValues.size(); i++) {
                    java.util.Map<String, Object> lineValues = tableValues.get(i);
                    for (int j = 0; j < items.length; j++) {
                        String columnName = items[j].substring(tableNamePrefix.length(), items[j].length());
                        Object currentValue = lineValues.get(items[j]);
                        %>
                        configuration_<%=cid%>.put("<%=tableName%>[<%=i%>].<%=columnName%>",
                        "<%=currentValue%>");
                        <%
                    }
                }
            } else if(p.getFieldType() == EParameterFieldType.SCHEMA_TYPE) {
                final String schemaName = p.getName();
                if(schemaName == null || !schemaName.contains("$$")) {
                    continue;
                }
                final String[] splitName = schemaName.split("\\$\\$");
                if(splitName.length < 2) {
                    continue;
                }
                final String parameterName = splitName[1];
                EConnectionType type = EConnectionType.getTypeFromName(p.getContext());
                final List<? extends IConnection> connections;
                if("in".equalsIgnoreCase(splitName[0])) {
                    connections = node.getIncomingConnections(type);
                } else {
                    connections = node.getOutgoingConnections(type);
                }
                if(connections != null && !connections.isEmpty()) {
                    IConnection connection = connections.get(0);
                    IMetadataTable metaTable = connection.getMetadataTable();
                    List<IMetadataColumn> columns = metaTable.getListColumns();
                    for(int i = 0; i < columns.size(); i++) {
                        IMetadataColumn column = columns.get(i);
                    %>
                        configuration_<%=cid%>.put("<%=parameterName%>[<%=i%>]",
                                "<%=column.getLabel()%>");
                    <%
                    }
                }
            } else {
%>
            configuration_<%=cid%>.put(
                "<%=p.getName().replace('$', '.')%>",
                <%if(p.getFieldType() == EParameterFieldType.PASSWORD) {%>
                <%=ElementParameterParser.getPasswordValue(node, p.getVariableName())%>
                <%} else {
                    String value = ElementParameterParser.getStringElementParameterValue(p);
                    value = org.talend.core.model.utils.TalendTextUtils.removeQuotes(value);
                %>
                <%=org.talend.core.model.utils.TalendTextUtils.addQuotes(value)%>
                <%}%>
                );
<%
            }
        }
    }
%>