# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Should OpenTracing be activated
# Default true
geronimo.opentracing.filter.active=false

# Urls for which the tracking should be activated automatically.
# The urls are actually the requets uri minus the context path.
geronimo.opentracing.filter.forcedTracing.urls=/api/v1/

# Urls for which the tracking should be skipped.
#geronimo.opentracing.filter.skippedTracing.urls=

# Type of matcher for the url.
# Default is prefix which means a startsWith is used on the url but you can also use regex which compiles the url as a Pattern prefix
geronimo.opentracing.filter.skippedTracing.matcherType=prefix

# Type of matcher for the url,
# Default is prefix which means a startsWith is used on the url but you can also use regex which compiles the url as a Pattern prefix
geronimo.opentracing.filter.forcedTracing.matcherType=prefix

# Should HTTP_METHOD, HTTP_URL not be added to tags.
# Default false
geronimo.opentracing.filter.forcedTracing.skipDefaultTags=false

# Should server instrumentation be ignored.
# Default false
#geronimo.opentracing.server.filter.request.skip.<endpoint class>_<endpoint method>=

# Should server instrumentation be ignored (if previous is not set).
# Default false
geronimo.opentracing.server.filter.request.skip=false

# Should HTTP_METHOD, HTTP_URL not be added to tags.
# Default false
geronimo.opentracing.server.filter.request.skipDefaultTags=false

# Should the operationName use the @Path annotations instead of class names.
# Default false
geronimo.opentracing.server.filter.request.operationName.usePath=false

# Should client instrumentation be ignored.
# Default false
geronimo.opentracing.client.filter.request.skip=false

# Should HTTP_METHOD, HTTP_URL not be added to tags.
# Default false
geronimo.opentracing.client.filter.request.skipDefaultTags=false

# Should PEER_HOSTNAME, PEER_PORT not be added to tags.
# Default false
geronimo.opentracing.client.filter.request.skipPeerTags=false

# Name of the header used to host the parent spanId value
# X-B3-ParentSpanId
geronimo.opentracing.propagation.headers.parentSpanId=X-B3-ParentSpanId

# Name of the header used to host the spanId value
# X-B3-SpanId
geronimo.opentracing.propagation.headers.spanId=X-B3-SpanId

# Name of the header used to host the traceId value
# X-B3-TraceId
geronimo.opentracing.propagation.headers.traceId=X-B3-TraceId

# Prefix of headers used to host the baggage values baggage
#geronimo.opentracing.propagation.headers.baggagePrefix=

# Name (as CDI names of the beans) of executor services which will get an interceptor propagating the current scope (span)
#geronimo.opentracing.cdi.executorServices.wrappedNames=

# counter (to generate longs), uuid (to generate random uuids) or hex (to use the hexa representation of the uuid generator).
# Specifies which kind of trace and span id are in use.
# Default counter
geronimo.opentracing.id.generator=counter

# For hex generator, a prefix to prepend to all ids
#geronimo.opentracing.id.generator.hex.prefix=

# Should spans converted to a zipkin representation.
# True until there is a standard opentracing format.
# Default true
geronimo.opentracing.span.converter.zipkin.active=true

# The local serviceName.
# Default hostname-jvmid
#geronimo.opentracing.span.converter.zipkin.serviceName=

# Should a logger named org.apache.geronimo.opentracing.zipkin log each span as a Zipkin JSON.
# This allows to use a logger implementation to push the spans to any backend (like log4j2 kafka appender).
# It uses JUL as a facade.
# Default true
geronimo.opentracing.span.converter.zipkin.logger.active=true

# Should zipkin JSON be logged wrapped in a list.
# Default true
geronimo.opentracing.span.converter.zipkin.logger.wrapAsList=true